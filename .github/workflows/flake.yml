name: "Build and check flake"
on:
  pull_request:
  push:
    branches: [main, devel]

permissions:
  actions: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
          host:
            - taffy
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          
      - name: "Install Nix"
        uses: nixbuild/nix-quick-install-action@v30
        
      - name: "Nix Cache"
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-created: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never
        
      - name: "Install nix-fast-build"
        run: nix profile install nixpkgs#nix-fast-build
      
      - name: "Build systems"
        run: |
          nix-fast-build --skip-cached --no-nom \
            --flake .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel
      
      - name: "Check flake"
        run: nix flake check
